// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT. Created at 2022-07-05 16:30:30
// ==========================================================================

package internal

import (
	"context"
	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// FreezingPointsRecordDao is the data access object for table he_freezing_points_record.
type FreezingPointsRecordDao struct {
	table   string                      // table is the underlying table name of the DAO.
	group   string                      // group is the database configuration group name of current DAO.
	columns FreezingPointsRecordColumns // columns contains all the column names of Table for convenient usage.
}

// FreezingPointsRecordColumns defines and stores column names for table he_freezing_points_record.
type FreezingPointsRecordColumns struct {
	Id             string // 记录ID
	BasicUid       string // 全局用户ID
	FromType       string // 来源类型 0）下单；1）下级消费奖励；2）退单申请；3）下级退单申请
	FromBasicUid   string // 下级全局用户ID
	OrderId        string // 所属订单ID
	IncomeRecordId string // 支付记录ID
	RefundId       string // 退款记录ID
	Integral       string // 冻结积分数量
	Status         string // 状态 0）已冻结 1）解除冻结 2）已失效
	Content        string // 操作详情
	IsDelete       string // 是否删除：1是，0否
	CreatedAt      string // 创建时间
	UpdatedAt      string // 最近更新时间
}

//  freezingPointsRecordColumns holds the columns for table he_freezing_points_record.
var freezingPointsRecordColumns = FreezingPointsRecordColumns{
	Id:             "id",
	BasicUid:       "basic_uid",
	FromType:       "from_type",
	FromBasicUid:   "from_basic_uid",
	OrderId:        "order_id",
	IncomeRecordId: "income_record_id",
	RefundId:       "refund_id",
	Integral:       "integral",
	Status:         "status",
	Content:        "content",
	IsDelete:       "is_delete",
	CreatedAt:      "created_at",
	UpdatedAt:      "updated_at",
}

// NewFreezingPointsRecordDao creates and returns a new DAO object for table data access.
func NewFreezingPointsRecordDao() *FreezingPointsRecordDao {
	return &FreezingPointsRecordDao{
		group:   "ssd",
		table:   "he_freezing_points_record",
		columns: freezingPointsRecordColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *FreezingPointsRecordDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *FreezingPointsRecordDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *FreezingPointsRecordDao) Columns() FreezingPointsRecordColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *FreezingPointsRecordDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *FreezingPointsRecordDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *FreezingPointsRecordDao) Transaction(ctx context.Context, f func(ctx context.Context, tx *gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
